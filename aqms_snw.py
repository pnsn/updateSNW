#!/app/rtem/metadata-venv/bin/python
# Part of the shell script package, updateSNW
# Get station information from AQMS and make SNW stations_info.ini file
# Uses a "groups.txt" file generated by information from ewserver waveservers
# to populate parts of the "groups" selector in the ini file.

import sys
import os
import numpy as np
#import matplotlib
#import matplotlib.pyplot as plt
import time
import datetime
from datetime import datetime
import psycopg2

# Database connection information Defaults to secondary host to keep load off primary.
# Uses connection information from the environment usually found in ~rtem/.ams.env
try:
    host=os.environ['DB_HOST']
    dbname=os.environ['DB_NAME']
    user=os.environ['DB_USER']
    password=os.environ['DB_PASS']
except KeyError:
    sys.exit("Requires ENV vars DB_NAME, DB_USER, DB_PASS and DB_HOST")
print ('From ',host,dbname)

aqscat="host={} dbname={} user={} password={}".format(host,dbname,user,password)
#print(aqscat)
aqsdbtype='postgresql'
connection=psycopg2.connect(aqscat)

# SQL that gets all current active station including without instruments being defined.
getstr1="select c.net,c.sta,c.lat,c.lon,c.elev,c.seedchan,c.ondate,s.staname,coalesce(d.description,'UNKNOWN') \
FROM jasi_station_view s left outer join channel_data c on c.net = s.net and c.sta = s.sta left outer join d_abbreviation d on c.inid = d.id \
WHERE c.offdate > CURRENT_TIMESTAMP AND c.flags != 'TG' AND c.net != 'NN' order by c.sta;"
getstr2="select c.net,c.sta,c.lat,c.lon,c.elev,c.seedchan,c.ondate,s.staname,coalesce(d.description,'UNKNOWN') \
FROM jasi_station_view s left outer join channel_data c on c.net = s.net and c.sta = s.sta left outer join d_abbreviation d on c.inid = d.id \
WHERE c.offdate > CURRENT_TIMESTAMP AND c.net ='UW' and c.flags='TG' order by c.sta;"

# Database access commands
curs=connection.cursor()
curs.execute(getstr1)
ret=curs.fetchall()
curs.execute(getstr2)
ret += curs.fetchall()
curs.close()
print("Number of channels found: ", len(ret))

# Open and read group file
fp=open("groups.txt", 'r')
line=fp.readline()
word1=line.split()
pairs = {word1[0] : word1[1]}
for line in fp:
   words=line.split()
   pairs[words[0]] = words[1]
print("Number of station-group pairs read: ", len(pairs))
fp.close()


# Open the output file
fp=open("stations_info.ini", 'w')
group=''
oldsta=''
oldchan=''
nsta=0
for (net, sta, lat, lon, elv, chan, start, longname, inst) in ret:
   #print(net, sta, chan, inst)
   if 'Z' not in chan :
      continue
   if oldsta != sta:
      nsta += 1
      fp.write('\n')
      fp.write("[%s-%s]\n" %(net,sta))
      fp.write('longName = "%s"\n' %(longname))
      if sta[0] == 'Q':
         fp.write('ruleSet = "NetQuakesRuleSet"\n')
      else:
         fp.write('ruleSet = "DefaultRuleSet"\n')
      fp.write('"Station Latitude" = %7.4f\n' %(lat))
      fp.write('"Station Longitude" = %7.4f\n' %(lon))
      fp.write('"Station Elevation" = %6.0f\n' %(elv))
      fp.write('"Start and End Dates" = "%9s"\n' %(start))
      fp.write('"DataLogger" = "%s"\n' %(inst))
      try:
         group=pairs[sta]
      except KeyError:
         if sta[0] != 'Q':
            print("Missing group for ",sta)
      else:
         fp.write('group = %s\n' %(group))
   if oldsta != sta or oldchan != chan:
      oldchan=chan
      if chan == 'ENZ' or chan == 'HNZ':
         fp.write( 'group = "StrongMotion"\n')
      if chan == 'HHZ' or chan == 'BHZ':
         fp.write( 'group = "BroadBand"\n')
      if chan == 'EHZ':
         fp.write( 'group = "ShortPeriod"\n')
      if sta[0] == 'Q':
         fp.write( 'group = "NetQuakes"\n')
         fp.write( 'group = "IMPORT-NQ"\n')
   oldsta=sta
   continue
print("Total number of stations configured: ",nsta)
